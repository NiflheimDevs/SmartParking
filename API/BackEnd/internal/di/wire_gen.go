// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"github.com/niflheimdevs/smartparking/internal/config"
	"github.com/niflheimdevs/smartparking/internal/db"
	"github.com/niflheimdevs/smartparking/internal/delivery/http"
	"github.com/niflheimdevs/smartparking/internal/delivery/http/handler"
	"github.com/niflheimdevs/smartparking/internal/delivery/mqtt"
	"github.com/niflheimdevs/smartparking/internal/delivery/mqtt/handler"
	"github.com/niflheimdevs/smartparking/internal/repository"
	"github.com/niflheimdevs/smartparking/internal/usecase"
	"gorm.io/gorm"
)

// Injectors from wire_http.go:

func InitializeHttpApp() (*http.App, error) {
	configConfig := config.Load()
	gormDB := db.Connect(configConfig)
	vehicleRepository := repository.NewVehicleRepository(gormDB)
	vehicleUseCase := usecase.NewVehicleUseCase(vehicleRepository)
	vehicleHandler := http_handler.NewVehicleHandler(vehicleUseCase)
	entranceExitRepository := repository.NewEntranceExitRepository(gormDB)
	entranceExitUseCase := usecase.NewEntranceExitUseCase(entranceExitRepository, vehicleUseCase)
	entranceExitHandler := http_handler.NewEntranceExitHandler(entranceExitUseCase)
	app := http.NewHttpApp(configConfig, gormDB, vehicleHandler, entranceExitHandler)
	return app, nil
}

// Injectors from wire_mqtt.go:

func InitializeMQTTApp(cfg *config.Config, db2 *gorm.DB) (*mqtt.MQTTClient, error) {
	entranceExitRepository := repository.NewEntranceExitRepository(db2)
	vehicleRepository := repository.NewVehicleRepository(db2)
	vehicleUseCase := usecase.NewVehicleUseCase(vehicleRepository)
	entranceExitUseCase := usecase.NewEntranceExitUseCase(entranceExitRepository, vehicleUseCase)
	parkingSpotRepository := repository.NewParkingSpotRepository(db2)
	parkingSpotUseCase := usecase.NewParkingSpotUseCase(parkingSpotRepository)
	sensorHandler := mqtt_handler.NewSensorHandler(entranceExitUseCase, parkingSpotUseCase, vehicleUseCase)
	mqttClient := mqtt.InitMQTT(cfg, sensorHandler)
	return mqttClient, nil
}
